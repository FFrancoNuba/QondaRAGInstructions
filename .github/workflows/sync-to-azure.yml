name: Sync to Azure Blob Storage

on:
  pull_request:
    types: [closed]
    branches:
      - main  # Only trigger when PRs are merged to main
    paths:
      - '**.txt'  # Only trigger on txt file changes

jobs:
  sync-to-blob:
    # Only run this job if the PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history to properly identify changed files

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install azure-storage-blob

      - name: Find changed txt files
        id: changed-files
        run: |
          # Get base and head commits of the PR
          BASE_COMMIT=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          HEAD_COMMIT=${{ github.event.pull_request.merge_commit_sha }}
          
          # Find modified and added txt files between base and merge commit
          CHANGED_FILES=$(git diff --name-only --diff-filter=AM $BASE_COMMIT $HEAD_COMMIT | grep '\.txt$' || echo "")
          echo "Changed txt files: $CHANGED_FILES"
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      - name: Upload to Azure Blob Storage
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
          CONTAINER_NAME: ${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}
        run: |
          python - <<EOF
          import os
          import sys
          from azure.storage.blob import BlobServiceClient, ContentSettings

          # Get connection string and container name from environment variables
          connection_string = os.environ.get('AZURE_STORAGE_CONNECTION_STRING')
          container_name = os.environ.get('CONTAINER_NAME')
          
          if not connection_string or not container_name:
              print("Error: Azure Storage connection string or container name not provided")
              sys.exit(1)
              
          # Get the list of changed files from previous step
          changed_files = "${{ steps.changed-files.outputs.files }}".strip()
          
          if not changed_files:
              print("No txt files changed, skipping upload")
              sys.exit(0)
              
          # Create BlobServiceClient
          blob_service_client = BlobServiceClient.from_connection_string(connection_string)
          container_client = blob_service_client.get_container_client(container_name)
          
          # Process each changed file
          for file_path in changed_files.split():
              if not file_path.endswith('.txt'):
                  continue
                  
              print(f"Processing file: {file_path}")
              
              # Get blob name (use just the filename)
              blob_name = os.path.basename(file_path)
              
              # Upload file to blob storage with overwrite enabled
              with open(file_path, "rb") as data:
                  blob_client = container_client.get_blob_client(blob_name)
                  content_settings = ContentSettings(content_type='text/plain')
                  print(f"Uploading {file_path} to {blob_name}")
                  blob_client.upload_blob(data, overwrite=True, content_settings=content_settings)
                  print(f"Upload complete for {blob_name}")
          EOF